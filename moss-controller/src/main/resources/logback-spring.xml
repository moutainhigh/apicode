<?xml version="1.0" encoding="UTF-8"?>
<configuration
        debug="false"
        scan="false">

    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />

    <springProperty scope="content" name="application.name" source="spring.application.name"/>
    <springProperty scope="content" name="logback.path" source="logback.path"/>
    <springProperty scope="content" name="logback.max-history" source="logback.max-history"/>
    <springProperty scope="content" name="logback.root-level" source="logback.root-level"/>
    <springProperty scope="content" name="logback.charset" source="logback.charset"/>
    <springProperty scope="content" name="logback.console-pattern" source="logback.console-pattern"/>
    <springProperty scope="content" name="logback.file-pattern" source="logback.file-pattern"/>
    <springProperty scope="content" name="logback.output-console" source="logback.output-console"/>
    <!-- 彩色日志格式 -->
    <property name="logback.console-pattern" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %line %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <property name="logback.file-pattern" value="[TRACEID:%X{traceId}] %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} %line - %msg%n" />
    <property name="logback.max-file-size" value="10MB" />
    <property name="logback.charset" value="UTF-8" />
    <property name="logback.max-history" value="50" />
    <property name="logback.path" value="../ycandyz-master-logs" />
    <!-- 二、子节点<contextName>：用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。-->
    <contextName>${application.name}</contextName>

    <!-- 四、子节点<appender>：负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名 -->
    <!--4.1 class为ch.qos.logback.core.ConsoleAppender 把日志输出到控制台-->
    <!--4.2 class为ch.qos.logback.core.FileAppender 把日志添加到文件-->
    <!--4.3 class为ch.qos.logback.core.rolling.RollingFileAppender 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件-->

    <!-- 控制台输出 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${logback.console-pattern}</pattern>
            <charset>${logback.charset}</charset>
        </encoder>
    </appender>
    <!--日志记录器，日期滚动记录-->
    <!-- 按照每天生成日志文件 -->
    <!-- INFO -->
    <appender name="FILE-INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件的路径及文件名-->
        <!--被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值-->
        <file>${logback.path}/${application.name}-info.log</file>
        <!-- 如果 true，事件被追加到现存文件尾部。如果 false，清空现存文件.默认为 true -->
        <append>true</append>
        <!--临界值过滤器，过滤掉低于指定临界值的日志。当日志级别等于或高于临界值时，过滤器返回NEUTRAL；当日志级别低于临界值时，日志会被拒绝-->
        <!-- 此日志文件只记录INFO级别的 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <!--当发生滚动时，决定 RollingFileAppender 的行为-->
        <!--日志记录器的滚动策略，按日期，按大小记录,涉及文件移动和重命名-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 归档的日志文件的路径，例如今天是2018-09-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
            而2018-09-21的归档日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
            <!--即file和fileNamePattern同时制定，当天日志名由file决定，前一天的文件名将自动改为fileNamePattern的值-->
            <!-- 若要加一层时间目录 <fileNamePattern>${logback.path}/%d{yyyy-MM-dd,aux}/${logback.info.filename}.%i.log</fileNamePattern>-->
            <fileNamePattern>${logback.path}/${application.name}-info.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <!--控制被保留的归档文件的最大数量，超出数量就删除旧文件-->
            <!--日志文件保留天数 -->
            <maxHistory>${logback.max-history}</maxHistory>|
            <!--指定文件的大小-->
            <maxFileSize>${logback.max-file-size}</maxFileSize>
        </rollingPolicy>
        <!--负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流-->
        <!-- 日志文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>${logback.file-pattern}</pattern>
            <!--日志字符编码格式-->
            <charset>${logback.charset}</charset>
        </encoder>
    </appender>

    <!-- ALL -->
    <appender name="FILE-ALL" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logback.path}/${application.name}-all.log</file>
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logback.path}/${application.name}-all.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxHistory>${logback.max-history}</maxHistory>
            <maxFileSize>${logback.max-file-size}</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${logback.file-pattern}</pattern>
            <charset>${logback.charset}</charset>
        </encoder>
    </appender>

    <!-- ERROR -->
    <appender name="FILE-ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logback.path}/${application.name}-error.log</file>
        <append>true</append>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logback.path}/${application.name}-error.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxHistory>${logback.max-history}</maxHistory>
            <maxFileSize>${logback.max-file-size}</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${logback.file-pattern}</pattern>
            <charset>${logback.charset}</charset>
        </encoder>
    </appender>

    <!--myibatis log configure , 过滤哪些模块 -->
    <logger name="com.apache.ibatis" level="TRACE" />
    <logger name="java.sql.Connection" level="DEBUG" />
    <logger name="java.sql.Statement" level="DEBUG" />
    <logger name="java.sql.PreparedStatement" level="DEBUG" />
    <logger name="org.springframework" level="WARN"/>
    <logger name="org.springframework.web.servlet.DispatcherServlet" level="INFO"/>
    <logger name="org.springframework.web.filter.CommonsRequestLoggingFilter" level="INFO"/>
    <logger name="org.springframework.jdbc" level="INFO"/>
    <logger name="org.springframework.boot.autoconfigure.logging" level="ERROR"/>
    <logger name="org.spring.springboot.dao" level="DEBUG"/>
    <logger name="redis" level="DEBUG"/>
    <logger name="org.spring.springboot.dao" level="INFO"/>
    <logger name="springfox.documentation" level="WARN"/>
    <logger name="com.baomidou.mybatisplus.extension.plugins.PerformanceInterceptor" level="DEBUG"/>
    <logger name="org.mybatis.spring.mapper.ClassPathMapperScanner" level="ERROR" />

    <!-- 这一句至关重要如果没有，就无法输出sql语句 -->
    <logger name="com.ycandyz.uke.dao" level="DEBUG"></logger>

    <!-- 3. 最终的策略 -->
    <!-- 3.1 开发环境,测试环境:打印控制台-->
    <springProfile name="dev,test,local,prod">
        <!-- 3.1.1 打印什么级别-->
        <root level="INFO">
            <appender-ref ref="FILE-ALL"/>
            <appender-ref ref="FILE-INFO"/>
            <appender-ref ref="FILE-ERROR"/>
            <appender-ref ref="CONSOLE"/>
        </root>
    </springProfile>

    <!-- 3.2 生产环境:输出到文档-->
    <springProfile name="prod">
        <!-- 3.2.1 打印什么级别-->
        <root level="INFO">
            <appender-ref ref="FILE-ALL"/>
            <appender-ref ref="FILE-INFO"/>
            <appender-ref ref="FILE-ERROR"/>
            <appender-ref ref="CONSOLE"/>
        </root>
    </springProfile>

</configuration>
